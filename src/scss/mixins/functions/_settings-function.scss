 // used in mixins[align-content,align-items,justify-content,triangle]
@function get-key($map,$key){
  @if map-has-key($map,$key){
    @return map-get($map,$key);
  }@else{
    @return null;
  }
}



//strip-units
 @function strip($value) {
  @return $value / ($value * 0 + 1);
}




@function insert-nth($list, $index, $value) {
    //Hugo Giraudel
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
  }

  @else if $index < 1 {
    @warn "List index 0 must be a non-zero integer for `insert-nth`";
  }

  @else if $index > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
  }

  @else {
    $result: ();

    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      }

      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}


/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}


@function to-string($value){
  @return inspect($value);
}

@function to-list($value) {
  @return if(type-of($value) != list, ($value,), $value);
}

@function to-map($value) {
  @return if(type-of($value) != map, (1: $value), $value);
}