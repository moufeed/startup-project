////
/// @group columns
/// @since 1.0.0
////


/// ### column-span
/// The column-span property specifies how many columns an element should span across.
/// #### Syntax :
/// ```markup
///   cspan( [1|all|initial|inherit] );
/// ```
/// @param {Number | String} $value [1]  -  The element should span across one column or all columns
/// @example   scss - SCSS
/// .foo{
///      @include cspan(all);
///     }
/// @example css - CSS
/// .foo {
///    -webkit-column-span: all;
///     column-span: all;
///      }
/// @throw
/// ### Not supported at firefox
/// ***
@mixin cspan($value){
    -webkit-column-span: $value;
    column-span: $value;
}
/// ### column-gap
/// The `column-gap` property specifies  the gap between the columns.
/// #### Syntax :
/// ```markup
///   cgap([length|normal|initial|inherit]);
/// ```
/// @param {Number | String} $value [auto]  -  length that will set the gap between the columns
/// @example  scss - SCSS
/// .foo{
///      @include cgap(40px);
///     }
/// @example css - CSS
/// .foo {
///        -webkit-column-gap: 40px;
///        -moz-column-gap: 40px;
///        column-gap: 40px;
///      }

@mixin cgap($value){
    -webkit-column-gap: $value;
    -moz-column-gap: $value;
    column-gap: $value;
}
/// ### column-count
/// The `column-count` property specifies  the number of columns an element should be divided into.
/// @param {Number | String} $value [1]  -  number of columns or will be determined by other properties
/// #### Syntax :
/// ```markup
///   ccount([number|auto|initial|inherit]);
/// ```
/// @example  scss - SCSS
/// .foo{
///     @include ccount(3);
///     }
/// @example css - CSS
/// .foo {
///       -webkit-column-count: 3;
///       -moz-column-count: 3;
///       column-count: 3;
///      }
@mixin ccount($value){
    webkit-column-count: $value;
    -moz-column-count: $value;
    column-count: $value;
}


/// ### column-rule
/// The `column-rule` property is a shorthand to sets the width, style, and color of the rule between columns.
/// @param {arguments} $arguments    -  sets the width, style, and color of the rule between columns.
/// #### Syntax :
/// ```markup
///   crule(<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>);
/// ```
/// @example  scss - SCSS
/// .foo{
///    @include crule(4px outset #ff00ff);
///     }
/// @example css - CSS
/// .foo {
///       -webkit-column-rule: 4px outset #ff00ff;
///       -moz-column-rule: 4px outset #ff00ff;
///       column-rule: 4px outset #ff00ff;
///      }
@mixin crule($arguments...){
    webkit-column-rule: $arguments;
    -moz-column-rule: $arguments;
    column-rule: $arguments;
}

/// ### column-width
/// The `column-width` property specifies a suggested, optimal width for the columns.
/// #### Syntax :
/// ```markup
///   cwidth( [auto|length|initial|inherit] );
/// ```
/// @param {Number} $value [auto]  -  width will be determined by the browser or specifies  width
/// @example  scss - SCSS
/// .foo{
///   @include cwidth(100px);
///     }
/// @example css - CSS
/// .foo {
///        webkit-column-width: 100px;
///        -moz-column-width: 100px;
///        column-width: 100px;
///      }
@mixin cwidth($value){
    -webkit-column-width: $value;
    -moz-column-width: $value;
    column-width: $value;
}



/// ### columns
/// The `columns` property is a shorthand property for setting column-width and column-count.
/// #### Syntax :
/// ```markup
///   columns( [auto|column-width] [column-count|initial|inherit] );
/// ```
/// @param {Number | count} $value [auto auto]  -  Sets both the column-width and the column-count
/// @example  scss - SCSS
/// .foo{
///   @include columns(100px 3);
///     }
/// @example css - CSS
/// .foo {
///      -webkit-columns: 100px 3;
///      -moz-columns: 100px 3;
///      columns: 100px 3;
///      }
@mixin columns($arguments...){
    -webkit-columns: $arguments;
    -moz-columns: $arguments;
    columns: $arguments;
}


//*-----------------------------------------
//* make columns mixin
//*-----------------------------------------
/// ### make columns mixin
/// The `mcols`  is a short way to make columns and gap between them
/// #### Syntax :
/// ```markup
///   mcols(  <'columns-number'> ,  <'column-gap-length'>  );
/// ```
/// @param {Number} $count [2]  -  The optimal number of columns into which the content of the element will be flowed
/// @param {length} $gap [15px]  -  A specified length that will set the gap between the columns
/// @example  scss - SCSS
/// .foo{
///   @include mcols(2,20px);
///     }
/// @example css - CSS
/// .foo {
///      -webkit-column-count: 2;
///      -moz-column-count: 2;
///      column-count: 2;
///      -webkit-column-gap: 20px;
///      -moz-column-gap: 20px;
///      column-gap: 20px;
///      }
@mixin mcols($count:2,$gap:15px){
    -webkit-column-count:     $count;
    -moz-column-count:        $count;
    column-count:             $count;
    -webkit-column-gap:       $gap;
    -moz-column-gap:          $gap;
    column-gap:               $gap;
}

